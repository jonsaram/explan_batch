<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="financialanalysis">

	<cache />
	
	<!--
	BUYER DETAIL
	 -->
	<select id="getBuyerDetail" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		 SELECT   BUYER_ID
				, COMPANY_NM
				, ESTABLISHMENT_DATE
				, FLOOR(MONTHS_BETWEEN(GET_KRDT(SYSDATE), TO_DATE(ESTABLISHMENT_DATE,'YYYY.MM.DD'))/12) AS MANAGEMENT_YEAR
				, FLOOR(MOD(MONTHS_BETWEEN(GET_KRDT(SYSDATE), TO_DATE(ESTABLISHMENT_DATE,'YYYY.MM.DD'))/12,1)*10) AS MANAGEMENT_MONTH
				, TRUNC(MONTHS_BETWEEN(GET_KRDT(SYSDATE), TO_DATE(ESTABLISHMENT_DATE,'YYYY.MM.DD'))/12,1) AS MANAGEMENT_PERIOD
				, OWNER_NM
				, OWNER_BIRTHDAY
				, FLOOR((GET_KRDT(SYSDATE) - TO_DATE(OWNER_BIRTHDAY,'YYYY.MM.DD'))/365) AS AGE
				, COMPANY_TYPE
				, SETTLEMENT_MONTH
				, EMPLOYEE_CNT
				, BUSINESS_TYPE
				, ADDRESS
				, COMPANY_CERT_STATUS
				, INDUSTRY_ESTATE_STATUS
				, BASE_DATE
				, UPDATE_USER
				, UPDATE_DATE
		   FROM TBL_EXP_BUYER_DETAIL
		  WHERE BUYER_ID = #{BUYER_ID}
	</select>
	<!--
	재무분석 총현황
	 -->
	<select id="getBasis01" resultType="java.util.HashMap" flushCache="true"  useCache="false">		
		SELECT    BUYER_ID
				, TO_CHAR(CAPITAL,'FM9,999,999,999,999') AS CAPITAL
				, TO_CHAR(STOCK,'FM9,999,999,999') AS STOCK
				, TO_CHAR(ORDINARY,'FM9,999,999,999') AS ORDINARY
				, TO_CHAR(PREFERRED_STOCK,'FM9,999,999,999') AS PREFERRED_STOCK
				, TO_CHAR(SANGWHAN_CONV_PRE_STOCK,'FM9,999,999,999') AS SANGWHAN_CONV_PRE_STOCK
				, TO_CHAR(ONE_STOCK_PRICE,'FM9,999,999,999') AS ONE_STOCK_PRICE
				, SALE_AMOUNT_GROWTH_RATE_INIT
				, SALE_AMOUNT_GROWTH_RATE
				, PROFIT_GROWTH_RATE_INIT
				, PROFIT_GROWTH_RATE
				, REP_RETIREMENT_YEAR
				, REP_RETIREMENT_AMOUNT
				, ANNUAL_DIVIDEND_TENYEAR_BEFORE
				, ANNUAL_DIVIDEND_TENYEAR_AFTER
				, UPDATE_USER
				, UPDATE_DATE
		   FROM TBL_EXP_FIN_ANAL_BASIS01
  		  WHERE BUYER_ID = #{BUYER_ID}
	</select>
	<!--
	사업목표 총현황
	 -->
	<select id="getBasis02" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT BUYER_ID
				, SEQ
				, BUSINESS_PURPOSE
				, UPDATE_USER
				, UPDATE_DATE
		   FROM TBL_EXP_FIN_ANAL_BASIS02
  		  WHERE BUYER_ID = #{BUYER_ID}
  		  ORDER BY SEQ
	</select>
	<!--
	임원현황
	 -->
	<select id="getFinAnalExecutive" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT BUYER_ID
				, SEQ
				, JIKWI
				, NAME
				, AGE
				, RELATIONSHIP
				, INAUGURATION_DATE
				, REAPPOINTMENT_DATE
				, LAST_REGISTERED_DATE
				, NEXT_REAPPOINTMENT_DATE
				, BASE_DATE
				, UPDATE_USER
				, UPDATE_DATE
		   FROM TBL_EXP_FIN_ANAL_EXECUTIVE
  		  WHERE BUYER_ID = #{BUYER_ID}
  		  ORDER BY SEQ
	</select>
	<!--
	재무비율분석
	 -->
	<select id="getFinAnalRate" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		SELECT   B.CODE_ID
		       , SUBSTR(B.CODE_ID,0,2) AS GRP_CD
		       , (SELECT CODE_NM FROM C##COMN.TBL_EXP_CODE WHERE GRP_CODE_ID = 'BUSINESS_INDEX_GROUP' AND CODE_ID = SUBSTR(B.CODE_ID,0,2)) AS GRP_NM
		       , B.CODE_NM AS ITEM_NAME
		       , TO_CHAR(B.BUSINESS_INDEX,'FM999.0') AS SECTORS_AVG_RATE
		       , TO_CHAR(LEAST(B.LOW_LIMIT, B.HIGH_LIMIT),'FM999.0') AS EVALUATION_MIN
		       , TO_CHAR(A.AMOUNT,'FM999.0') AS COMPANY_RATE
		       , TO_CHAR(GREATEST(B.LOW_LIMIT, B.HIGH_LIMIT),'FM999.0') AS EVALUATION_MAX
		       , CASE WHEN A.AMOUNT <![CDATA[>=]]> LEAST(B.LOW_LIMIT, B.HIGH_LIMIT) AND A.AMOUNT <![CDATA[<]]> GREATEST(B.LOW_LIMIT, B.HIGH_LIMIT) THEN <![CDATA['<span class="normal-mark">양호</span>']]>
			          WHEN A.AMOUNT <![CDATA[<]]>  LEAST(B.LOW_LIMIT, B.HIGH_LIMIT) AND B.CODE_ID IN ('0101','0102') THEN <![CDATA['<span class="excellence-mark">우수</span>']]>  
		         	  WHEN A.AMOUNT <![CDATA[<]]>  LEAST(B.LOW_LIMIT, B.HIGH_LIMIT) AND B.CODE_ID NOT IN ('0101','0102') THEN <![CDATA['<span class="danger-mark">위험</span>']]> 
		         	  WHEN A.AMOUNT <![CDATA[>=]]> GREATEST(B.LOW_LIMIT, B.HIGH_LIMIT) AND B.CODE_ID IN ('0101','0102') THEN <![CDATA['<span class="danger-mark">위험</span>']]>  
		         	  WHEN A.AMOUNT <![CDATA[>=]]> GREATEST(B.LOW_LIMIT, B.HIGH_LIMIT) AND B.CODE_ID NOT IN ('0101','0102') THEN <![CDATA['<span class="excellence-mark">우수</span>']]>
		         END AS ICON_STR
		       , B.ATTR1
		       , B.ATTR2
		  FROM 
		(
			-- Buyer 부채비율 0101
			SELECT '0101' AS CODE_ID, ROUND(MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100,2) AS AMOUNT
			  FROM (
				SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
				  FROM TBL_EXP_FIN_ANAL_STATUS tefas 
				 WHERE BUYER_ID  = #{BUYER_ID}
				   AND ACCOUNT_NAME IN ('유동부채(*)','비유동부채(*)')
				   AND AMOUNT != '-'
				   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
											FROM TBL_EXP_FIN_ANAL_STATUS
										   WHERE BUYER_ID  = #{BUYER_ID})
				UNION ALL
				SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
				  FROM TBL_EXP_FIN_ANAL_STATUS tefas 
				 WHERE BUYER_ID  = #{BUYER_ID}
				   AND ACCOUNT_NAME LIKE '자본(*)'
				   AND AMOUNT != '-'
				   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
											FROM TBL_EXP_FIN_ANAL_STATUS
										   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- Buyer 차입금의존도 0102
			SELECT '0102' AS CODE_ID, ROUND(MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100,2) AS AMOUNT
			  FROM (
				SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
				  FROM TBL_EXP_FIN_ANAL_STATUS tefas 
				 WHERE BUYER_ID  = #{BUYER_ID}
				   AND ACCOUNT_NAME IN ('단기차입금(*)','장기차입금(*)','회사채(*)','유동성장기부채(*)')
				   AND AMOUNT != '-'
				   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
											FROM TBL_EXP_FIN_ANAL_STATUS
										   WHERE BUYER_ID  = #{BUYER_ID})
				UNION ALL
				SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
				  FROM TBL_EXP_FIN_ANAL_STATUS tefas 
				 WHERE BUYER_ID  = #{BUYER_ID}
				   AND ACCOUNT_NAME = '자본(*)'
				   AND AMOUNT != '-'
				   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
											FROM TBL_EXP_FIN_ANAL_STATUS
										   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- Buyer 유동비율 0103
			SELECT '0103' AS CODE_ID, ROUND(MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100,2) AS AMOUNT
			  FROM (
				SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
				  FROM TBL_EXP_FIN_ANAL_STATUS tefas 
				 WHERE BUYER_ID  = #{BUYER_ID}
				   AND ACCOUNT_NAME IN ('유동자산(*)')
				   AND AMOUNT != '-'
				   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
											FROM TBL_EXP_FIN_ANAL_STATUS
										   WHERE BUYER_ID  = #{BUYER_ID})
				UNION ALL
				SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
				  FROM TBL_EXP_FIN_ANAL_STATUS tefas 
				 WHERE BUYER_ID  = #{BUYER_ID}
				   AND ACCOUNT_NAME IN ('유동부채(*)')
				   AND AMOUNT != '-'
				   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
											FROM TBL_EXP_FIN_ANAL_STATUS
										   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- Buyer 이자보상비율 0104
			SELECT '0104' AS CODE_ID, ROUND(MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100,2) AS AMOUNT
			  FROM (
				SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
				  FROM TBL_EXP_FIN_ANAL_STATUS tefas 
				 WHERE BUYER_ID  = #{BUYER_ID}
				   AND ACCOUNT_NAME IN ('영업이익(손실)')
				   AND AMOUNT != '-'
				   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
											FROM TBL_EXP_FIN_ANAL_STATUS
										   WHERE BUYER_ID  = #{BUYER_ID})
				UNION ALL
				SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
				  FROM TBL_EXP_FIN_ANAL_STATUS tefas 
				 WHERE BUYER_ID  = #{BUYER_ID}
				   AND ACCOUNT_NAME IN ('이자비용')
				   AND AMOUNT != '-'
				   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
											FROM TBL_EXP_FIN_ANAL_STATUS
										   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- 총자산증가율 0301
			SELECT '0301' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100)-100,2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('유동자산(*)', '비유동자산(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('유동자산(*)', '비유동자산(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- 자기자본증가율 0302
			SELECT '0302' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100)-100,2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('자본(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('자본(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- 유동자산증가율 0303
			SELECT '0303' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100)-100,2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('유동자산(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('유동자산(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- 매출액증가율 0304
			SELECT '0304' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100)-100,2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출액(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출액(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- 매출순이익율 0201
			SELECT '0201' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100),2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('당기순이익(순손실)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출액(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- 매출영업이익률 0202
			SELECT '0202' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100),2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('영업이익(손실)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, SUM(REPLACE(AMOUNT,',')) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출액(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			)
			UNION ALL
			-- 총자산이익률 0203
			SELECT '0203' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100),2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('당기순이익(순손실)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, ROUND(SUM(REPLACE(AMOUNT,','))/2,0) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('자산(*)')
			   AND AMOUNT != '-'
			   AND (ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
		        OR ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID}))
			)
			UNION ALL
			-- 자기자본순이익률 0204
			SELECT '0204' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT) * 100),2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('당기순이익(순손실)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, ROUND(SUM(REPLACE(AMOUNT,','))/2,0) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('자본(*)')
			   AND AMOUNT != '-'
			   AND (ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
		        OR ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID}))
			)
			UNION ALL
			-- 총자산회전율 0401
			SELECT '0401' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT)),2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출액(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, ROUND(SUM(REPLACE(AMOUNT,','))/2,0) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('자산(*)')
			   AND AMOUNT != '-'
			   AND (ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
		        OR ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID}))
			)
			UNION ALL
			-- 재고자산회전율 0402
			SELECT '0402' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT)),2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출액(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, ROUND(SUM(REPLACE(AMOUNT,','))/2,0) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('재고자산(*)')
			   AND AMOUNT != '-'
			   AND (ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
		        OR ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID}))
			)
			UNION ALL
			-- 매입채무회전율 0403
			SELECT '0403' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT)),2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출액(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, ROUND(SUM(REPLACE(AMOUNT,','))/2,0) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매입채무(*)')
			   AND AMOUNT != '-'
			   AND (ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
		        OR ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID}))
			)
			UNION ALL
			-- 매출채권회전율 0404
			SELECT '0404' AS CODE_ID, ROUND((MAX(A_AMOUNT) / MAX(B_AMOUNT)),2) AS AMOUNT
			  FROM (
			SELECT SUM(REPLACE(AMOUNT,',')) AS A_AMOUNT, NULL AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출액(*)')
			   AND AMOUNT != '-'
			   AND ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
			UNION ALL
			SELECT NULL AS A_AMOUNT, ROUND(SUM(REPLACE(AMOUNT,','))/2,0) AS B_AMOUNT
			  FROM TBL_EXP_FIN_ANAL_STATUS
			 WHERE BUYER_ID  = #{BUYER_ID}
			   AND ACCOUNT_NAME IN ('매출채권(*)')
			   AND AMOUNT != '-'
			   AND (ACCOUNTING_DATE = (SELECT MAX(ACCOUNTING_DATE)
										FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID})
		        OR ACCOUNTING_DATE = (SELECT TO_CHAR(MAX(ADD_MONTHS(TO_DATE(ACCOUNTING_DATE,'YYYY-MM-DD'),-12)),'YYYY-MM-DD')
									    FROM TBL_EXP_FIN_ANAL_STATUS
									   WHERE BUYER_ID  = #{BUYER_ID}))
			)
		) A,
		(
		---- 한국은행 평균값, 비교비율
		SELECT 
		       C.CODE_ID,
		       C.CODE_NM,
		       I.BUSINESS_INDEX, 
		       I.BUSINESS_INDEX * (C.ATTR1/100) AS LOW_LIMIT, 
		       I.BUSINESS_INDEX * (C.ATTR2/100) AS HIGH_LIMIT, 
		       C.ATTR1, 
		       C.ATTR2
		  FROM TBL_EXP_FIN_ANAL_BUSINESS_INDEX I,
		       C##COMN.TBL_EXP_CODE C
		 WHERE I.YEAR = (SELECT MAX(YEAR) FROM TBL_EXP_FIN_ANAL_BUSINESS_INDEX)
		   AND I.BUSINESS_TYPE_CODE = '001'
		   AND I.BUSINESS_INDEX_CODE = C.CODE_ID
		   AND C.GRP_CODE_ID = 'BUSINESS_INDEX'
		) B
		WHERE A.CODE_ID = B.CODE_ID
		ORDER BY A.CODE_ID
	</select>
	<!--
	경영진단 결과 개요
	 -->
	<select id="getFinAnalResult" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT BUYER_ID
				, YEAR
				, SEQ
				, REPLACE(ITEM_NM,CHR(10),'<![CDATA[<BR>]]>') AS ITEM_NM
				, CONSULT_MSG
				, CHECK_YN
				, UPDATE_USER
				, UPDATE_DATE
		   FROM TBL_EXP_FIN_ANAL_RESULT
  		  WHERE BUYER_ID = #{BUYER_ID}
  		    AND YEAR = (SELECT MAX(YEAR) FROM TBL_EXP_FIN_ANAL_RESULT WHERE BUYER_ID = #{BUYER_ID})
  		  ORDER BY CHECK_YN DESC, SEQ ASC
	</select>
	<!--
	재무상태표,손익계산서, 주요경비율, 인건비 분석(구버전)
	 -->
	<select id="getFinAnalStatusDtl" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT M.GUBUN
		        , M.ITEM_GUBUN
		        , D.SEQ
				, D.DEPTH AS DEPTH
				, D.ITEM_NAME AS ITEM_NAME
				, DECODE(SUM(DECODE(M.YEAR, Y.YEAR1, D.AMOUNT, NULL)),NULL,NULL,TO_CHAR(SUM(DECODE(M.YEAR, Y.YEAR1, D.AMOUNT, NULL)),'FM999,999,999')) AS YEAR1
				, DECODE(SUM(DECODE(M.YEAR, Y.YEAR2, D.AMOUNT, NULL)),NULL,NULL,TO_CHAR(SUM(DECODE(M.YEAR, Y.YEAR2, D.AMOUNT, NULL)),'FM999,999,999')) AS YEAR2
				, DECODE(SUM(DECODE(M.YEAR, Y.YEAR3, D.AMOUNT, NULL)),NULL,NULL,TO_CHAR(SUM(DECODE(M.YEAR, Y.YEAR3, D.AMOUNT, NULL)),'FM999,999,999')) AS YEAR3
		   FROM TBL_EXP_FIN_ANAL_STATUS_DTL D,
		        TBL_EXP_FIN_ANAL_STATUS_MST M,
		        (
				   SELECT MAX(YEAR)-2 AS YEAR1,
		                  MAX(YEAR)-1 AS YEAR2,
		                  MAX(YEAR) AS YEAR3
				   FROM TBL_EXP_FIN_ANAL_STATUS_MST
		          WHERE BUYER_ID = #{BUYER_ID}
		        ) Y
		  WHERE M.BUYER_ID = D.BUYER_ID
		    AND M.YEAR = D.YEAR
		    AND M.GUBUN  = D.gubun
		    AND M.ITEM_GUBUN = D.ITEM_GUBUN
		    AND M.BUYER_ID = #{BUYER_ID}
		    AND M.YEAR IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
          GROUP BY M.GUBUN, M.ITEM_GUBUN, D.SEQ, D.DEPTH, D.ITEM_NAME
  		  ORDER BY M.GUBUN, M.ITEM_GUBUN, SEQ
	</select>
	<!--
	기준년도(구버전)
	 -->
	<select id="getFinAnalYear" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT TO_CHAR(ADD_MONTHS(GET_KRDT(SYSDATE), -12*3),'YYYY')||'년' AS YEAR1,
		          TO_CHAR(ADD_MONTHS(GET_KRDT(SYSDATE), -12*2),'YYYY')||'년' AS YEAR2,
		          TO_CHAR(ADD_MONTHS(GET_KRDT(SYSDATE), -12*1),'YYYY')||'년' AS YEAR3,
                  MAX(YEAR)-2||'년' AS DATA_YEAR1,
                  MAX(YEAR)-1||'년' AS DATA_YEAR2,
                  MAX(YEAR)||'년' AS DATA_YEAR3
		   FROM TBL_EXP_FIN_ANAL_STATUS_MST
          WHERE BUYER_ID = #{BUYER_ID}
	</select>
	<!--
	재무상태표,손익계산서(신버전)
	 -->
	<select id="getFinAnalStatus" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT S.ACCOUNT_GUBUN 
		        , S.SEQ
		        , NULL AS ITEM_GUBUN
				, CASE WHEN S.INDENT_DEGREE-25 <![CDATA[<=]]> 0 THEN 0 ELSE S.INDENT_DEGREE-25 END AS DEPTH
				, S.ACCOUNT_NAME 
				, MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, S.AMOUNT, NULL)) AS YEAR1
				, MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, S.AMOUNT, NULL)) AS YEAR2
				, MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, S.AMOUNT, NULL)) AS YEAR3
		   FROM TBL_EXP_FIN_ANAL_STATUS S,
		        (
				   SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
		                  MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
		                  MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
				     FROM TBL_EXP_FIN_ANAL_STATUS
		            WHERE BUYER_ID = #{BUYER_ID}
		        ) Y
		  WHERE S.BUYER_ID = #{BUYER_ID}
		    AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)		    
          GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.INDENT_DEGREE, S.ACCOUNT_NAME
          ORDER BY S.ACCOUNT_GUBUN DESC, S.SEQ
	</select>
	<!--
	기준년도(신버전)
	 -->
	<select id="getFinAnalStdYear" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT TO_CHAR(ADD_MONTHS(GET_KRDT(SYSDATE), -12*3),'YYYY')||'년' AS YEAR1,
		          TO_CHAR(ADD_MONTHS(GET_KRDT(SYSDATE), -12*2),'YYYY')||'년' AS YEAR2,
		          TO_CHAR(ADD_MONTHS(GET_KRDT(SYSDATE), -12*1),'YYYY')||'년' AS YEAR3,
		          (MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2)||'년' AS DATA_YEAR1,
		          (MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1)||'년' AS DATA_YEAR2,
		          (MAX(SUBSTR(ACCOUNTING_DATE,0,4)))||'년' AS DATA_YEAR3,
		          (MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2)||'' AS PARAM_YEAR1,
		          (MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1)||'' AS PARAM_YEAR2,
		          (MAX(SUBSTR(ACCOUNTING_DATE,0,4)))||'' AS PARAM_YEAR3
		   FROM TBL_EXP_FIN_ANAL_STATUS
          WHERE BUYER_ID = #{BUYER_ID}
	</select>
	<!--
	재무상태표,손익계산서, 주요경비율, 인건비 분석
	 -->
	<select id="getFinAnalStatusMst" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT BUYER_ID
				, YEAR
				, GUBUN
				, ITEM_GUBUN
				, UPDATE_USER
				, UPDATE_DATE
		   FROM TBL_EXP_FIN_ANAL_STATUS_MST
          WHERE BUYER_ID = #{BUYER_ID}
  		    AND GUBUN = #{GUBUN}
  		    AND ITEM_GUBUN = #{ITEM_GUBUN}
	</select>
	<!--
	주요주주현황
	 -->
	<select id="getFinAnalStockholder" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		   SELECT BUYER_ID
				, SEQ
				, STOCKHOLDER_NM
				, TO_CHAR(STOCK_CNT,'FM9,999,999,999,999') AS STOCK_CNT
				, TO_CHAR(SHARE_RATIO,'FM999.0') AS SHARE_RATIO
				, STOCK_KIND
				, OWNER_RELATIONSHIP
				, COMPANY_RELATIONSHIP
				, BORROWED_NM_YN
				, TRIM(TO_DATE(BASE_DATE,'YYYY-MM-DD')) AS BASE_DATE
				, UPDATE_USER
				, UPDATE_DATE
		   FROM TBL_EXP_FIN_ANAL_STOCKHOLDER
          WHERE BUYER_ID = #{BUYER_ID}
          ORDER BY SEQ
	</select>
	<!--
	기업 라이프 사이클별 경영이슈
	 -->
	<select id="getFinAnalLifecycleIssue" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		SELECT	ISSUE_CODE,
				CHECK_START_NUM,
				CHECK_END_NUM,
				DECODE(CHECK_START_NUM,'0','','15','15년 이상',CHECK_START_NUM||'~')||DECODE(CHECK_END_NUM,'2','3년 미만','999','',TO_NUMBER(CHECK_END_NUM)+1||'년') AS PERIOD_STR,
				ISSUE_TITLE,
				ISSUE_EXPLAIN,
				ISSUE_DETAIL,
				SP_CSTM_ID,
				UPDATE_USER,
				UPDATE_DATE,
				MANAGEMENT_PERIOD,
				(SELECT ISSUE_TITLE
				  FROM TBL_EXP_FIN_ANAL_LIFECYCLE_ISSUE
				 WHERE TO_NUMBER(CHECK_START_NUM) <![CDATA[<=]]> TO_NUMBER(MANAGEMENT_PERIOD) 
				   AND TO_NUMBER(CHECK_END_NUM) <![CDATA[>=]]> TO_NUMBER(MANAGEMENT_PERIOD)) AS CURRENT_STEP, 
				CASE WHEN TO_NUMBER(CHECK_START_NUM)<![CDATA[<=]]>TO_NUMBER(MANAGEMENT_PERIOD) 
							AND TO_NUMBER(CHECK_END_NUM)<![CDATA[>=]]>TO_NUMBER(MANAGEMENT_PERIOD) THEN 'life-card' ELSE 'life-card-disabled' END AS CHECK_STR
		   FROM (
				SELECT	ISSUE_CODE,
						CHECK_START_NUM,
						CHECK_END_NUM,
						ISSUE_TITLE,
						ISSUE_EXPLAIN,
						ISSUE_DETAIL,
						SP_CSTM_ID,
						UPDATE_USER,
						UPDATE_DATE,
						(SELECT MAX(TRUNC(MONTHS_BETWEEN(GET_KRDT(SYSDATE), TO_DATE(ESTABLISHMENT_DATE,'YYYY.MM.DD'))/12,1))
						   FROM TBL_EXP_BUYER_DETAIL
						  WHERE BUYER_ID = #{BUYER_ID}) AS MANAGEMENT_PERIOD
				   FROM TBL_EXP_FIN_ANAL_LIFECYCLE_ISSUE
                   WHERE ISSUE_CODE = ISSUE_CODE
				)
		  ORDER BY ISSUE_CODE
	</select>
	<!--
	주요주주 List(대표이사제외)
	 -->
	<select id="getFinAnalStockholderStr" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		  SELECT LISTAGG(STOCKHOLDER_NM||'('||SHARE_RATIO||'%)', ',') WITHIN GROUP(ORDER BY SEQ) AS STOCKHOLDER_NM
		    FROM TBL_EXP_FIN_ANAL_STOCKHOLDER
		   WHERE COMPANY_RELATIONSHIP != '대표이사'
		     AND BUYER_ID = #{BUYER_ID}
	</select>
	<!--
	재무상태표 체크사항
	 -->
	<select id="getFinAnalRefStr" resultType="java.util.HashMap" flushCache="true"  useCache="false">	
		 SELECT ETC02, ETC03
		   FROM TBL_EXP_FIN_ANAL_BASIC_CODE
		  WHERE ETC02 IS NOT NULL
		  ORDER BY ORD_NO
	</select>
	<!--
	재무상태표 리스트
	 -->
	<select id="getFinAnalBalanceSheet" resultType="java.util.HashMap" flushCache="true"  useCache="false">	
		SELECT   DISTINCT A.CODE 
		       , REPLACE(LPAD(' ', 1*(LEVEL-1)),' ','<![CDATA[&nbsp;]]>') || CODE_NM || ETC02 AS CODE_NM
		       , A.ETC01 
		       , B.AMOUNT AS AMT1 
		       , C.AMOUNT AS AMT2 
		       , D.AMOUNT AS AMT3 
		       , A.ORD_NO
		  FROM  TBL_EXP_FIN_ANAL_BASIC_CODE A
		       ,TBL_EXP_FIN_ANAL_STATUS B
		       ,TBL_EXP_FIN_ANAL_STATUS C
		       ,TBL_EXP_FIN_ANAL_STATUS D
		 WHERE A.CODE = B.CODE(+)
		   AND A.CODE = C.CODE(+) 
		   AND A.CODE = D.CODE(+)
		   AND B.YEAR(+) = TO_CHAR(ADD_MONTHS(SYSDATE, -12*3),'YYYY')
		   AND C.YEAR(+) = TO_CHAR(ADD_MONTHS(SYSDATE, -12*2),'YYYY')
		   AND D.YEAR(+) = TO_CHAR(ADD_MONTHS(SYSDATE, -12*1),'YYYY')
		   AND B.BUYER_ID = #{BUYER_ID}
		   AND C.BUYER_ID = #{BUYER_ID}
		   AND D.BUYER_ID = #{BUYER_ID}
		  START WITH PARENT_CODE IS NULL
		  CONNECT BY PRIOR A.CODE = PARENT_CODE
		  ORDER BY A.ORD_NO
	</select>
	<!--
	재무상태표 자산, 유동자산, 비유동자산, 부채, 자본 합산 계산용
	 -->
	<select id="getFinAnalSumAmount" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		SELECT SUM(DECODE(YEAR,TO_CHAR(ADD_MONTHS(SYSDATE, -12*3),'YYYY'),AMOUNT,0)) AS AMT1,
			   SUM(DECODE(YEAR,TO_CHAR(ADD_MONTHS(SYSDATE, -12*2),'YYYY'),AMOUNT,0)) AS AMT2,
			   SUM(DECODE(YEAR,TO_CHAR(ADD_MONTHS(SYSDATE, -12*1),'YYYY'),AMOUNT,0)) AS AMT3
		  FROM TBL_EXP_FIN_ANAL_STATUS
		 WHERE BUYER_ID = #{BUYER_ID}
		   AND CODE IN (SELECT DISTINCT REGEXP_SUBSTR(ETC01, '[^+]+', 1, LEVEL) AS CODES
						  FROM TBL_EXP_FIN_ANAL_BASIC_CODE
						 WHERE CODE = #{CODE}
						CONNECT BY LEVEL <![CDATA[<=]]> LENGTH(REGEXP_REPLACE(ETC01, '[^+]+')) + 1)
	</select>

	<!--
	주요 경비율 분석
	 -->
	<select id="getCostRate" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		SELECT  '매출원가' AS ITEM_NAME
		       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
			   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
			   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
		  FROM TBL_EXP_FIN_ANAL_STATUS S
		       ,(
			     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
		                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
		                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
			       FROM TBL_EXP_FIN_ANAL_STATUS
		          WHERE BUYER_ID = #{BUYER_ID}
		        ) Y
		 WHERE S.BUYER_ID = #{BUYER_ID}
		   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
		   AND S.ACCOUNT_NAME LIKE '매출원가%'
		  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
		UNION
		SELECT  '매출액' AS ITEM_NAME
		       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
			   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
			   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
		  FROM TBL_EXP_FIN_ANAL_STATUS S
		       ,(
			     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
		                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
		                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
			       FROM TBL_EXP_FIN_ANAL_STATUS
		          WHERE BUYER_ID = #{BUYER_ID}
		        ) Y
		 WHERE S.BUYER_ID = #{BUYER_ID}
		   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
		   AND S.ACCOUNT_NAME LIKE '매출액%'
		  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
		UNION
		SELECT  '인건비' AS ITEM_NAME
		       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
			   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
			   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
		  FROM TBL_EXP_FIN_ANAL_STATUS S
		       ,(
			     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
		                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
		                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
			       FROM TBL_EXP_FIN_ANAL_STATUS
		          WHERE BUYER_ID = #{BUYER_ID}
		        ) Y
		 WHERE S.BUYER_ID = #{BUYER_ID}
		   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
		   AND S.ACCOUNT_NAME LIKE '급여%'
		  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
		UNION
		SELECT  '임차료' AS ITEM_NAME
		       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
			   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
			   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
		  FROM TBL_EXP_FIN_ANAL_STATUS S
		       ,(
			     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
		                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
		                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
			       FROM TBL_EXP_FIN_ANAL_STATUS
		          WHERE BUYER_ID = #{BUYER_ID}
		        ) Y
		 WHERE S.BUYER_ID = #{BUYER_ID}
		   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
		   AND S.ACCOUNT_NAME LIKE '임차료%'
		  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
	</select>

	<!--
	주요 인건비 추이
	 -->
	<select id="getFinAnalLaborState" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		SELECT B.ITEM_NAME, NVL(A.YEAR1,'0') AS YEAR1, NVL(A.YEAR2,'0') AS YEAR2, NVL(A.YEAR3,'0') AS YEAR3
		  FROM 
		(
		      SELECT  '급여' AS ITEM_NANE
				       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
				  FROM TBL_EXP_FIN_ANAL_STATUS S
				       ,(
					     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
					       FROM TBL_EXP_FIN_ANAL_STATUS
				          WHERE BUYER_ID = #{BUYER_ID}
				        ) Y
				 WHERE S.BUYER_ID = #{BUYER_ID}
				   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
				   AND S.ACCOUNT_NAME LIKE '급여%'
				  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME		  
				UNION
				SELECT  '임원급여' AS ITEM_NANE
				       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
				  FROM TBL_EXP_FIN_ANAL_STATUS S
				       ,(
					     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
					       FROM TBL_EXP_FIN_ANAL_STATUS
				          WHERE BUYER_ID = #{BUYER_ID}
				        ) Y
				 WHERE S.BUYER_ID = #{BUYER_ID}
				   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
				   AND S.ACCOUNT_NAME LIKE '임원급여%'
				  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
				UNION
				SELECT  '직원급여' AS ITEM_NANE
				       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
				  FROM TBL_EXP_FIN_ANAL_STATUS S
				       ,(
					     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
					       FROM TBL_EXP_FIN_ANAL_STATUS
				          WHERE BUYER_ID = #{BUYER_ID}
				        ) Y
				 WHERE S.BUYER_ID = #{BUYER_ID}
				   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
				   AND S.ACCOUNT_NAME LIKE '직원급여%'
				  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
				UNION
				SELECT  '상여금' AS ITEM_NANE
				       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
				  FROM TBL_EXP_FIN_ANAL_STATUS S
				       ,(
					     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
					       FROM TBL_EXP_FIN_ANAL_STATUS
				          WHERE BUYER_ID = #{BUYER_ID}
				        ) Y
				 WHERE S.BUYER_ID = #{BUYER_ID}
				   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
				   AND S.ACCOUNT_NAME LIKE '상여금%'
				  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
				UNION
				SELECT  '잡금' AS ITEM_NANE
				       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
				  FROM TBL_EXP_FIN_ANAL_STATUS S
				       ,(
					     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
					       FROM TBL_EXP_FIN_ANAL_STATUS
				          WHERE BUYER_ID = #{BUYER_ID}
				        ) Y
				 WHERE S.BUYER_ID = #{BUYER_ID}
				   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
				   AND S.ACCOUNT_NAME LIKE '잡금%'
				  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
				UNION
				SELECT  '퇴직급여' AS ITEM_NANE
				       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
				  FROM TBL_EXP_FIN_ANAL_STATUS S
				       ,(
					     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
					       FROM TBL_EXP_FIN_ANAL_STATUS
				          WHERE BUYER_ID = #{BUYER_ID}
				        ) Y
				 WHERE S.BUYER_ID = #{BUYER_ID}
				   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
				   AND S.ACCOUNT_NAME LIKE '퇴직급여%'
				  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
				UNION
				SELECT  '복리후생비' AS ITEM_NANE
				       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
				  FROM TBL_EXP_FIN_ANAL_STATUS S
				       ,(
					     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
					       FROM TBL_EXP_FIN_ANAL_STATUS
				          WHERE BUYER_ID = #{BUYER_ID}
				        ) Y
				 WHERE S.BUYER_ID = #{BUYER_ID}
				   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
				   AND S.ACCOUNT_NAME LIKE '복리후생비%'
				  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
				UNION 
				SELECT  '매출액' AS ITEM_NANE
				       ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR1, REPLACE(S.AMOUNT,','), NULL)) AS YEAR1
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR2, REPLACE(S.AMOUNT,','), NULL)) AS YEAR2
					   ,MAX(DECODE(SUBSTR(S.ACCOUNTING_DATE,0,4), Y.YEAR3, REPLACE(S.AMOUNT,','), NULL)) AS YEAR3
				  FROM TBL_EXP_FIN_ANAL_STATUS S
				       ,(
					     SELECT MAX(SUBSTR(ACCOUNTING_DATE,0,4))-2 AS YEAR1,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4))-1 AS YEAR2,
				                MAX(SUBSTR(ACCOUNTING_DATE,0,4)) AS YEAR3
					       FROM TBL_EXP_FIN_ANAL_STATUS
				          WHERE BUYER_ID = #{BUYER_ID}
				        ) Y
				 WHERE S.BUYER_ID = #{BUYER_ID}
				   AND SUBSTR(S.ACCOUNTING_DATE,0,4) IN (Y.YEAR1,Y.YEAR2,Y.YEAR3)
				   AND S.ACCOUNT_NAME LIKE '매출액%'
				  GROUP BY S.ACCOUNT_GUBUN, S.SEQ, S.ACCOUNT_NAME
				UNION 
				SELECT '상시근로자수' AS ITEM_NAME
					  , NVL(TO_CHAR(SUM(YEAR1)),'0') AS YEAR1
					  , NVL(TO_CHAR(SUM(YEAR2)),'0') AS YEAR2
					  , NVL(TO_CHAR(SUM(YEAR3)),'0') AS YEAR3 
				  FROM (
						SELECT LABOR_COUNT AS YEAR1, NULL AS YEAR2, NULL AS YEAR3
						  FROM TBL_EXP_FIN_ANAL_YEAR_LABOR A  
						 WHERE BUYER_ID = #{BUYER_ID}
						   AND YEAR = #{YEAR1}
						UNION 
						SELECT NULL AS YEAR1, LABOR_COUNT AS YEAR2, NULL AS YEAR3
						  FROM TBL_EXP_FIN_ANAL_YEAR_LABOR A  
						 WHERE BUYER_ID = #{BUYER_ID}
						   AND YEAR = #{YEAR2}
						UNION 
						SELECT NULL AS YEAR1, NULL AS YEAR2, LABOR_COUNT AS YEAR3
						  FROM TBL_EXP_FIN_ANAL_YEAR_LABOR A  
						 WHERE BUYER_ID = #{BUYER_ID}
						   AND YEAR = #{YEAR3}
					)
		) A,		  
		(
		SELECT '급여' AS ITEM_NAME, 1 AS ORDNUM FROM DUAL
		UNION
		SELECT '임원급여' AS ITEM_NAME, 2 AS ORDNUM FROM DUAL
		UNION
		SELECT '직원급여' AS ITEM_NAME, 3 AS ORDNUM FROM DUAL
		UNION
		SELECT '상여금' AS ITEM_NAME, 4 AS ORDNUM FROM DUAL
		UNION
		SELECT '잡금' AS ITEM_NAME, 5 AS ORDNUM FROM DUAL
		UNION
		SELECT '퇴직급여' AS ITEM_NAME, 6 AS ORDNUM FROM DUAL
		UNION
		SELECT '복리후생비' AS ITEM_NAME, 7 AS ORDNUM FROM DUAL
		UNION
		SELECT '매출액' AS ITEM_NAME, 10 AS ORDNUM FROM DUAL
		UNION
		SELECT '상시근로자수' AS ITEM_NAME, 99 AS ORDNUM FROM DUAL
		) B
		WHERE A.ITEM_NANE(+) = B.ITEM_NAME
		ORDER BY B.ORDNUM
	</select>

	<!--
	년별 상시근로자 수
	 -->
	<select id="getYearLaborCount" resultType="java.util.HashMap" flushCache="true"  useCache="false">
	SELECT NVL(SUM(YEAR1),0) AS YEAR1, NVL(SUM(YEAR2),0) AS YEAR2, NVL(SUM(YEAR3),0) AS YEAR3 
	  FROM (
			SELECT LABOR_COUNT AS YEAR1, NULL AS YEAR2, NULL AS YEAR3
			  FROM TBL_EXP_FIN_ANAL_YEAR_LABOR A  
			 WHERE BUYER_ID = #{BUYER_ID}
			   AND YEAR = #{YEAR1}
			UNION 
			SELECT NULL AS YEAR1, LABOR_COUNT AS YEAR2, NULL AS YEAR3
			  FROM TBL_EXP_FIN_ANAL_YEAR_LABOR A  
			 WHERE BUYER_ID = #{BUYER_ID}
			   AND YEAR = #{YEAR2}
			UNION 
			SELECT NULL AS YEAR1, NULL AS YEAR2, LABOR_COUNT AS YEAR3
			  FROM TBL_EXP_FIN_ANAL_YEAR_LABOR A  
			 WHERE BUYER_ID = #{BUYER_ID}
			   AND YEAR = #{YEAR3}
		   )
	</select>
</mapper>
